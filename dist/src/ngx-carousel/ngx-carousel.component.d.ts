import { ElementRef, Renderer, OnInit, OnDestroy, AfterViewInit, EventEmitter, AfterContentInit, OnChanges, SimpleChanges } from '@angular/core';
import { NgxCarouselStore } from './ngx-carousel.interface';
import { Subscription } from 'rxjs/Subscription';
export declare class NgxCarouselComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, OnChanges {
    private el;
    private renderer;
    itemsSubscribe: Subscription;
    carouselCssNode: any;
    pointIndex: number;
    pointers: number;
    userData: any;
    moveToSlide: number;
    carouselLoad: EventEmitter<{}>;
    onMove: EventEmitter<{}>;
    private items;
    private points;
    private next;
    private prev;
    private carouselMain1;
    private carouselInner1;
    private carousel1;
    private pointMain;
    private forTouch;
    private leftBtn;
    private rightBtn;
    private evtValue;
    private pauseCarousel;
    private pauseInterval;
    private carousel;
    private carouselMain;
    private carouselInner;
    private carouselItems;
    private onResize;
    private onScrolling;
    private carouselInt;
    Arr1: ArrayConstructor;
    pointNumbers: Array<any>;
    data: NgxCarouselStore;
    constructor(el: ElementRef, renderer: Renderer);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onResizing(event: any): void;
    ngOnChanges(changes: SimpleChanges): void;
    private storeCarouselData();
    private touch();
    private touchHandling(e, ev);
    private onWindowScrolling();
    private carouselPoint();
    private carouselPointActiver();
    moveTo(index: number): void;
    private carouselSize();
    private carouselScrollOne(Btn);
    private carouselScrollTwo(Btn, currentSlide, itemSpeed);
    private btnBoolean(first, last);
    private transformStyle(slide);
    private carouselLoadTrigger();
    private generateID();
    private carouselInterval();
    private carouselIntervalEvent(ev);
    private carouselAnimator(direction, start, end, speed, length);
    private buttonControl();
    private setStyle(el, prop, val);
}
